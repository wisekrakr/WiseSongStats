{"version":3,"sources":["context.js","components/activities/Search.js","components/layouts/Header.js","components/layouts/Spinner.js","components/songs/Song.js","components/artists/Artist.js","components/songs/Songs.js","components/layouts/Index.js","components/helpers/TextHelper.js","components/helpers/ContentHelper.js","components/songs/Lyrics.js","components/albums/AlbumInfo.js","components/albums/Album.js","components/artists/Discography.js","components/countries/Country.js","components/countries/Countries.js","components/countries/CountryChart.js","components/activities/ScrollToTop.js","js/main.js","index.js","App.js"],"names":["Context","React","createContext","ContextController","children","useState","song_list","artist_list","heading","state","setState","useEffect","axios","all","get","process","then","spread","songs","artists","data","message","body","track_list","undefined","length","catch","err","console","log","Provider","value","withRouter","props","useContext","user_input","setUserInput","song_title","setSongTitle","artist_name","setArtistName","res","onSubmit","event","preventDefault","className","type","placeholder","name","onChange","target","onClick","history","push","Header","to","src","alt","role","Song","song","loading","Spinner","has_lyrics","track_id","id","track_name","album_name","num_favourite","Artist","artist","artist_id","artist_country","artist_alias_list","map","alias","key","Math","random","artist_alias","artist_rating","artist_twitter_url","Songs","item","track","Index","href","trimNonsenseText","info","deleteFromHere","search","substring","checkForContent","content","Lyrics","setSong","lyrics","setLyrics","songInfo","setSongInfo","match","params","Object","keys","htmlFor","lyrics_body","split","lyric","i","wiki","toptags","tag","genre","published","track_rating","listeners","playcount","explicit","Albums","album","setAlbum","setSongs","extraInfo","setExtraInfo","tracks","album_label","album_rating","tags","text","Album","album_id","album_release_date","primary_genres","music_genre_list","music_genre","music_genre_name","Discography","setArtist","albums","setAlbums","related_artists","setRelatedArtists","lastfm_artist","setLastfmArtist","setLoading","a","async","album_list","res2","getData","stats","bio","Country","country","alpha2Code","style","background","flag","float","capital","population","languages","language","currencies","currency","Countries","country_list","setCountryList","countries","numericCode","CountryChart","setCountry","countrySongChart","setCountrySongChart","countryArtistChart","setCountryArtistChart","height","backgroundSize","nativeName","region","subregion","regionalBlocs","bloc","latlng","altSpellings","spelling","btnStyle","display","position","bottom","right","cursor","border","borderRadius","padding","backgroundColor","ScrollToTop","pathname","useLocation","window","scrollTo","document","documentElement","scrollTop","title","$","ready","on","this","hash","animate","offset","top","location","onscroll","buttonToTop","getElementById","menuButton","querySelector","menu","menuNav","menuBranding","navItems","querySelectorAll","navMenuItems","showMenu","toggleMenu","classList","remove","forEach","scroll","overflow","add","addEventListener","myLabels","Array","from","label","e","which","click","ReactDOM","render","exact","path","component","AlbumInfo"],"mappings":"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","file":"static/js/main.bdc85ee5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Context provides a way to pass data through\r\n// the component tree without having to pass props down manually at every level.\r\nexport const Context = React.createContext();\r\n\r\nexport function ContextController({ children }) {\r\n  let intialState = {\r\n    song_list: [],\r\n    artist_list: [],\r\n    heading: \"\"\r\n  };\r\n\r\n  const [state, setState] = useState(intialState);\r\n\r\n  // Shows a list of top US artists and songs on Homepage\r\n\r\n  // TODO NOT A LIMIT OF 10. TIME FOR PAGINATION!!!!! =>>>> CONTAINER OR CAROUSEL TO PUT OUT PAGES IN. MULTIPLE PAGETURNERS ON ONE PAGE\r\n  useEffect(() => {\r\n    axios\r\n      .all([\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}chart.tracks.get?\r\n          chart_name=top&\r\n          country=us&\r\n          apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}chart.artists.get?\r\n          &page_size=20&page=1&\r\n          apikey=${process.env.REACT_APP_API_KEY}`\r\n        )\r\n      ])\r\n      .then(\r\n        axios.spread((songs, artists) => {\r\n          setState({\r\n            song_list: songs.data.message.body.track_list,\r\n            artist_list: artists.data.message.body.artist_list,\r\n            heading:\r\n              songs === undefined ||\r\n              songs.length === 0 ||\r\n              artists === undefined ||\r\n              artists.length === 0\r\n                ? {\r\n                    songs: \"Top 10 Songs Searched\",\r\n                    artists: \"Top 10 Artists Searched\"\r\n                  }\r\n                : {\r\n                    songs: \"Most Searched Songs\",\r\n                    artists: \"Most Searched Artists\"\r\n                  }\r\n          });\r\n        })\r\n      )\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  // We will import this from the Component so that we can access data in the Context.Provider\r\n  // {value => /* render something based on the context value */}\r\n  // This is similar to what mapStateToProps does\r\n  // The Provider will wrap around every other Component, so that we can access\r\n  // any state that we put in this provider, we will be able to access through any other\r\n  // Component as long as we use a Consumer\r\n  return (\r\n    <Context.Provider value={[state, setState]}>{children}</Context.Provider>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Context } from \"../../context\";\r\n\r\nconst Search = props => {\r\n  const [setState] = useContext(Context);\r\n  const [user_input, setUserInput] = useState(\"\");\r\n  const [song_title, setSongTitle] = useState(\"\");\r\n  const [artist_name, setArtistName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .all([\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}track.search?\r\n          q_track=${song_title}&\r\n          ${process.env.REACT_APP_TOP_TEN}&page=1&\r\n          s_track_rating=desc&\r\n          apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}artist.search?\r\n          q_artist=${artist_name}&\r\n          ${process.env.REACT_APP_TOP_TEN}&page=1&\r\n          apikey=${process.env.REACT_APP_API_KEY}`\r\n        )\r\n      ])\r\n      .then(res => {\r\n        let song_list = res[0].data.message.body.track_list;\r\n        let artist_list = res[1].data.message.body.artist_list;\r\n\r\n        setState({\r\n          song_list: song_list,\r\n          artist_list: artist_list,\r\n\r\n          heading:\r\n            user_input === \"\"\r\n              ? {\r\n                  songs: \"Top 10 Songs Searched\",\r\n                  artists: \"Top 10 Artists Searched\"\r\n                }\r\n              : {\r\n                  songs: `Search Results for Songs with: ${user_input}`,\r\n                  artists: `Search Results for Artist: ${user_input}`\r\n                }\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }, [song_title, artist_name, user_input, setState]); // Only re-run the effect if params changes\r\n\r\n  const findMusic = event => {\r\n    event.preventDefault();\r\n    setSongTitle(user_input);\r\n    setArtistName(user_input);\r\n  };\r\n\r\n  const searchValue = event => {\r\n    setUserInput(event.target.value);\r\n  };\r\n\r\n  const backToHomePage = () => {\r\n    let path = `/`;\r\n    props.history.push(path);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={findMusic} className=\"form-inline my-2 my-lg-0\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control mr-sm-2\"\r\n        placeholder=\"Search for any artist or song...\"\r\n        name=\"user_input\"\r\n        value={user_input}\r\n        onChange={searchValue}\r\n      />\r\n      <button\r\n        onClick={backToHomePage}\r\n        className=\"btn btn-dark my-2 my-sm-0\"\r\n        type=\"Submit\"\r\n      >\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default withRouter(Search);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Search from \"../activities/Search\";\r\n\r\n// TODO: Create a nav bar with links to different pages with multiple stats\r\n// The Homepage will be the top 10 songs in the US and the search option\r\n// One page will be a top 5 in mulitple countries\r\n// Another page with top 5 in multiple genres....etc\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"site-menu\">\r\n      <Link to=\"/\" className=\"navbar-brand nav-link \">\r\n        <img\r\n          src=\"https://raw.githubusercontent.com/wisekrakr/portfolio_res/master/images/calavera.gif\"\r\n          alt=\"\"\r\n        />\r\n      </Link>\r\n\r\n      <div className=\"menu-btn\">\r\n        <div className=\"btn-line\"></div>\r\n        <div className=\"btn-line\"></div>\r\n        <div className=\"btn-line\"></div>\r\n      </div>\r\n      <nav className=\"menu\">\r\n        <div className=\"menu-branding\">\r\n          <div className=\"portrait\"></div>\r\n        </div>\r\n        <ul className=\"menu-nav\">\r\n          <li className=\"nav-item nav-menu-item\">\r\n            <Link to=\"/\" className=\"nav-link text-lg \">\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item nav-menu-item\">\r\n            <Link to=\"/countries/\" className=\"nav-link text-lg \">\r\n              Countries\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item nav-menu-item\">\r\n            <Link to=\"/about/\" className=\"nav-link text-lg \">\r\n              About\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item nav-menu-item\">\r\n            <Link to=\"/contact/\" className=\"nav-link text-lg \">\r\n              Contact\r\n            </Link>\r\n          </li>\r\n          <Search />\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div className=\"spinner-grow text-info\" role=\"status\">\r\n        <span className=\"sr-only text-light\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../layouts/Spinner\";\r\n\r\nconst Song = props => {\r\n  const { song, loading } = props;\r\n\r\n  if (loading) {\r\n    return (\r\n      <Fragment>\r\n        <Spinner />\r\n      </Fragment>\r\n    );\r\n  } else {\r\n    return song.has_lyrics === 0 ? null : (\r\n      <div className=\"col-md-6\">\r\n        <Link to={`/lyrics/song/${song.track_id}`}>\r\n          <div className=\"card text-white card-song mb-3\" id=\"card-pick\">\r\n            <div className=\"card-header\">\r\n              <span className=\"card-title\"> {song.artist_name} </span> -{\" \"}\r\n              <span className=\"card-subtitle\">{song.track_name}</span>\r\n            </div>\r\n\r\n            <div className=\"card-body card-info\">\r\n              <h4>\r\n                <i className=\"fas fa-play\"></i> Song : {song.track_name}\r\n              </h4>\r\n              <p className=\"card-text\">\r\n                <br />\r\n                <strong>\r\n                  <i className=\"fas fa-list\"></i> Album : {song.album_name}\r\n                </strong>\r\n                <br />\r\n                <strong>\r\n                  <i className=\"fas fa-heart\"></i> Favorited :{\" \"}\r\n                  {song.num_favourite}\r\n                </strong>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Song;\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../layouts/Spinner\";\r\n\r\nconst Artist = props => {\r\n  const { artist, loading } = props;\r\n\r\n  if (loading) {\r\n    return (\r\n      <Fragment>\r\n        <Spinner />\r\n      </Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <Link to={`/discography/artist/${artist.artist_id}`}>\r\n          <div className=\"card text-white card-artist mb-4\" id=\"card-pick\">\r\n            <div className=\"card-header\">\r\n              <h5 className=\"card-subtitle\">{artist.artist_name}</h5>\r\n            </div>\r\n            <div className=\"card-body card-info\">\r\n              <p className=\"card-text\">\r\n                <strong>\r\n                  <i className=\"fas fa-flag\"></i> Artist Country :{\" \"}\r\n                  {artist.artist_country === \"\"\r\n                    ? \"NO DATA AVAILABLE\"\r\n                    : artist.artist_country}\r\n                </strong>\r\n                <br />\r\n\r\n                <strong>\r\n                  <i className=\"fas fa-list\"></i> Artist Aliases :{\" \"}\r\n                  {artist.artist_alias_list.length === 0\r\n                    ? \"NO DATA AVAILABLE\"\r\n                    : artist.artist_alias_list.map(alias => (\r\n                        <li key={Math.random()} data={alias}>\r\n                          {alias.artist_alias}\r\n                        </li>\r\n                      ))}\r\n                </strong>\r\n                <br />\r\n                <strong>\r\n                  <i className=\"fas fa-heart\"></i> Artist Rating :\r\n                  {artist.artist_rating}\r\n                </strong>\r\n                <br />\r\n                <strong>\r\n                  <i className=\"fab fa-twitter\"></i> Artist Twitter :\r\n                  {artist.artist_twitter_url !== \"\"\r\n                    ? artist.artist_twitter_url\r\n                    : \"NO DATA AVAILABLE\"}\r\n                </strong>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Artist;\r\n","import React, { useContext, Fragment } from \"react\";\r\nimport { Context } from \"../../context\";\r\nimport Spinner from \"../layouts/Spinner\";\r\nimport Song from \"./Song\";\r\nimport Artist from \"../artists/Artist\";\r\n\r\nconst Songs = () => {\r\n  const [state] = useContext(Context);\r\n  const { song_list, artist_list, heading } = state;\r\n\r\n  if (\r\n    song_list === undefined ||\r\n    song_list.length === 0 ||\r\n    artist_list === undefined ||\r\n    artist_list.length === 0\r\n  ) {\r\n    return <Spinner />;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"container\">\r\n          <h3 className=\"text-center text-xl\">{heading.songs} </h3>\r\n          <div className=\"row\" id=\"top_songs\">\r\n            {song_list.map(item => (\r\n              <Song key={item.track.track_id} song={item.track} />\r\n            ))}\r\n          </div>\r\n          <h3 className=\"text-center text-xl\">{heading.artists}</h3>\r\n          <div className=\"row\" id=\"top_artists\">\r\n            {artist_list.map(item => (\r\n              <Artist key={item.artist.artist_id} artist={item.artist} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Songs;\r\n","import React, { Fragment } from \"react\";\r\nimport Songs from \"../songs/Songs\";\r\n\r\nconst Index = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"jumbotron jumbo-index\" id=\"top\">\r\n        <h1 className=\"text-center large-heading\">The Search for Music</h1>\r\n        <p className=\"lead text-center\">Get info on any song or artist</p>\r\n\r\n        <ul className=\"nav justify-content-center flex-row p-2 w-100 bg-light\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"#top_songs\">\r\n              <h4>Top 10 Songs</h4>\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"#top_artists\">\r\n              <h4>Top 10 Artists</h4>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <Songs />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","// A simple function to shorten text from lastFm\r\n\r\nexport function trimNonsenseText(info) {\r\n  let deleteFromHere = info.search(\"<a\", 0);\r\n  return info.substring(0, deleteFromHere);\r\n}\r\n","// Check if content is available, if not, return NO DATA AVAILABLE\r\n\r\nexport function checkForContent(content) {\r\n  if (content === undefined || content === \"\") {\r\n    return \"NO DATA AVAILABLE\";\r\n  } else {\r\n    return content;\r\n  }\r\n}\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../layouts/Spinner\";\r\nimport { trimNonsenseText } from \"../helpers/TextHelper\";\r\nimport { checkForContent } from \"../helpers/ContentHelper\";\r\n\r\nconst Lyrics = props => {\r\n  const [song, setSong] = useState({});\r\n  const [lyrics, setLyrics] = useState({});\r\n  const [songInfo, setSongInfo] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .all([\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}track.lyrics.get?\r\n      track_id=${props.match.params.id}&\r\n      apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}track.get?\r\n        track_id=${props.match.params.id}&\r\n        apikey=${process.env.REACT_APP_API_KEY}`\r\n        )\r\n      ])\r\n\r\n      .then(res => {\r\n        let lyrics = res[0].data.message.body.lyrics;\r\n        setLyrics({ lyrics });\r\n        let song = res[1].data.message.body.track;\r\n        setSong({ song });\r\n\r\n        return axios.get(\r\n          `https://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=${process.env.REACT_APP_LAST_KEY}&artist=${song.artist_name}&track=${song.track_name}&format=json`\r\n        );\r\n      })\r\n      .then(res => {\r\n        let songInfo = res.data.track;\r\n        setSongInfo(songInfo);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, [props.match.params.id]);\r\n\r\n  if (\r\n    song === undefined ||\r\n    lyrics === undefined ||\r\n    Object.keys(song).length === 0 ||\r\n    Object.keys(lyrics).length === 0\r\n  ) {\r\n    return <Spinner />;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <Link to=\"/\" className=\"btn btn-light btn-sm mb-4\">\r\n          Go Home\r\n        </Link>\r\n        <div className=\"container\">\r\n          <div className=\"card card-lyric\">\r\n            <h5 className=\"card-header \">\r\n              {song.song.track_name} by{\" \"}\r\n              <Link\r\n                to={`/discography/artist/${song.song.artist_id}`}\r\n                className=\"btn med-btn\"\r\n              >\r\n                {song.song.artist_name}{\" \"}\r\n              </Link>\r\n            </h5>\r\n\r\n            {/* Start Lyrics collapsible */}\r\n\r\n            <div className=\"wrap-collabsible\">\r\n              <input id=\"collapsible\" className=\"toggle\" type=\"checkbox\" />\r\n              <label htmlFor=\"collapsible\" className=\"lbl-toggle toggle-lyrics\">\r\n                Lyrics\r\n              </label>\r\n\r\n              <div className=\"collapsible-content\">\r\n                <div className=\"content-inner\">\r\n                  {lyrics.lyrics.lyrics_body.split(\"\\n\").map((lyric, i) => {\r\n                    return (\r\n                      <p key={i} data={lyric}>\r\n                        {lyric}\r\n                      </p>\r\n                    );\r\n                  })}\r\n                  <label htmlFor=\"collapsible\" className=\"lbl-toggle \">\r\n                    Close\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* End Lyrics collapsible */}\r\n\r\n          {/* Start Song Info */}\r\n          <div className=\"card\">\r\n            <div className=\"container \">\r\n              <h3 className=\"x-small-heading\">Song Trivia</h3>\r\n              <ul className=\"list-group info-list\">\r\n                <li className=\"list-group-item\">\r\n                  {songInfo === undefined ||\r\n                  Object.keys(songInfo).length === 0 ||\r\n                  songInfo.wiki === undefined ||\r\n                  songInfo.wiki.content === \"NO DATA AVAILABLE\"\r\n                    ? \"NO DATA AVAILABLE\"\r\n                    : trimNonsenseText(songInfo.wiki.content)}\r\n                </li>\r\n              </ul>\r\n              <ul className=\"list-group info-list\">\r\n                <h3 className=\"x-small-heading\">Genre(s):</h3>\r\n\r\n                {songInfo === undefined ||\r\n                Object.keys(songInfo).length === 0 ||\r\n                songInfo.toptags.tag.length === 0\r\n                  ? \"NO DATA AVAILABLE\"\r\n                  : songInfo.toptags.tag.map(genre => (\r\n                      <li\r\n                        className=\"list-group-item\"\r\n                        key={Math.random()}\r\n                        data={genre}\r\n                      >\r\n                        {genre.name}\r\n                      </li>\r\n                    ))}\r\n\r\n                {/* {console.log(songInfo.toptags)} */}\r\n              </ul>\r\n              <h3 className=\"x-small-heading\">Additional Info:</h3>\r\n              <ul className=\"list-group info-list\">\r\n                <li className=\"list-group-item\">\r\n                  <strong>Album </strong> :\r\n                  <strong className=\"info-text\">\r\n                    {checkForContent(song.song.album_name)}\r\n                  </strong>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <strong>Release Date </strong> :\r\n                  <strong className=\"info-text\">\r\n                    {songInfo === undefined ||\r\n                    Object.keys(songInfo).length === 0 ||\r\n                    songInfo.wiki === undefined ||\r\n                    songInfo.wiki.published === \"NO DATA AVAILABLE\"\r\n                      ? \"NO DATA AVAILABLE\"\r\n                      : checkForContent(songInfo.wiki.published)}\r\n                  </strong>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <strong>Song Rating </strong> :\r\n                  <strong className=\"info-text\">\r\n                    {checkForContent(song.song.track_rating)}\r\n                  </strong>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <strong>Song Listeners </strong> :\r\n                  <strong className=\"info-text\">\r\n                    {songInfo === undefined ||\r\n                    Object.keys(songInfo).length === 0\r\n                      ? \"NO DATA AVAILABLE\"\r\n                      : checkForContent(songInfo.listeners)}\r\n                  </strong>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <strong>Song Playcount </strong> :\r\n                  <strong className=\"info-text\">\r\n                    {songInfo === undefined ||\r\n                    Object.keys(songInfo).length === 0\r\n                      ? \"NO DATA AVAILABLE\"\r\n                      : checkForContent(songInfo.playcount)}\r\n                  </strong>\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  <strong>Explicit Lyrics </strong> :\r\n                  <strong className=\"info-text\">\r\n                    {song.song.explicit === 0 ? \"No\" : \"Yes\"}\r\n                  </strong>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          {/* End Song Info */}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Lyrics;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../layouts/Spinner\";\r\nimport Song from \"../songs/Song\";\r\nimport { checkForContent } from \"../helpers/ContentHelper\";\r\nimport { trimNonsenseText } from \"../helpers/TextHelper\";\r\n\r\nconst Albums = props => {\r\n  const [album, setAlbum] = useState({});\r\n  const [songs, setSongs] = useState({});\r\n  const [extraInfo, setExtraInfo] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .all([\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}album.get?\r\n        album_id=${props.match.params.id}&\r\n        apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}album.tracks.get?\r\n        album_id=${props.match.params.id}&page_size=30&page=1&\r\n        apikey=${process.env.REACT_APP_API_KEY}`\r\n        )\r\n      ])\r\n      .then(res => {\r\n        let album = res[0].data.message.body.album;\r\n        setAlbum({ album });\r\n        let songs = res[1].data.message.body.track_list;\r\n        setSongs({ songs });\r\n\r\n        return axios.get(\r\n          `https://ws.audioscrobbler.com/2.0/?method=album.getinfo&api_key=${process.env.REACT_APP_LAST_KEY}&artist=${album.artist_name}&album=${album.album_name}&format=json`\r\n        );\r\n      })\r\n      .then(res => {\r\n        const info = res.data.album;\r\n        setExtraInfo(info);\r\n        console.log(res);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, [props.match.params.id]);\r\n\r\n  if (\r\n    album === undefined ||\r\n    Object.keys(album).length === 0 ||\r\n    songs === undefined ||\r\n    Object.keys(songs).length === 0 ||\r\n    extraInfo === undefined ||\r\n    Object.keys(extraInfo).length === 0\r\n  ) {\r\n    return <Spinner />;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <Link\r\n          to={`/discography/artist/${album.artist_id}`}\r\n          className=\"btn btn-light btn-sm mb-4\"\r\n        >\r\n          Go Home\r\n        </Link>\r\n        {/*START ARTIST JUMBOTRON */}\r\n        <div className=\"jumbotron jumbo-manual bg-secondary-dark\">\r\n          <h3 className=\"large-heading\">{album.album.album_name}</h3>\r\n          <h3 className=\"x-small-heading\">{album.album.artist_name}</h3>\r\n          <p className=\"heading-underline\" />\r\n          <div className=\"row row-disco\">\r\n            <div className=\"col-disco\">\r\n              <ul className=\"list-group\">\r\n                <strong>\r\n                  {\" \"}\r\n                  <i className=\"fas fa-play\"></i> Album Info\r\n                </strong>\r\n                <li className=\"list-group-item\">\r\n                  Track Count :{checkForContent(extraInfo.tracks.track.length)}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Album Release Date:\r\n                  {checkForContent(extraInfo.wiki.published)}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Label : {checkForContent(album.album.album_label)}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Album Rating:{checkForContent(album.album.album_rating)}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"col-disco\">\r\n              <strong>\r\n                {\" \"}\r\n                <i className=\"fas fa-info\"></i> Additional Info\r\n              </strong>\r\n              <ul className=\"list-group\">\r\n                {extraInfo.tags.tag.length === 0\r\n                  ? \"NO GENRE AVAILABLE\"\r\n                  : extraInfo.tags.tag.map(genre => (\r\n                      <li\r\n                        key={Math.random()}\r\n                        data={genre}\r\n                        className=\"list-group-item\"\r\n                      >\r\n                        {genre.name}\r\n                      </li>\r\n                    ))}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/*END ARTIST JUMBOTRON */}\r\n\r\n        {/* Start Extra Info*/}\r\n        {extraInfo.wiki.content === \"\" ? (\r\n          \"\"\r\n        ) : (\r\n          <div className=\"wrap-collabsible\">\r\n            <input id=\"collapsible\" className=\"toggle\" type=\"checkbox\" />\r\n            <label htmlFor=\"collapsible\" className=\"lbl-toggle toggle-bio\">\r\n              The Story behind the Music\r\n            </label>\r\n\r\n            <div className=\"collapsible-content\">\r\n              <div className=\"content-inner \">\r\n                {trimNonsenseText(extraInfo.wiki.content)\r\n                  .split(\"\\n\")\r\n                  .map((text, i) => {\r\n                    return (\r\n                      <p key={i} data={text}>\r\n                        {text}\r\n                      </p>\r\n                    );\r\n                  })}\r\n                <label htmlFor=\"collapsible\" className=\"lbl-toggle \">\r\n                  Close\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* END BIO */}\r\n\r\n        <div className=\"container\">\r\n          <div className=\"row \">\r\n            {songs.songs.length === 0 ? (\r\n              <div className=\"alert alert-danger ml-3\">\r\n                <strong>NO SONGS AVAILABLE... </strong>\r\n              </div>\r\n            ) : (\r\n              songs.songs.map(item => (\r\n                <Song key={item.track.track_id} song={item.track} />\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Albums;\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { checkForContent } from \"../helpers/ContentHelper\";\r\nimport Spinner from \"../layouts/Spinner\";\r\n\r\nconst Album = props => {\r\n  const { album, loading } = props;\r\n\r\n  if (loading) {\r\n    return (\r\n      <Fragment>\r\n        <Spinner />\r\n      </Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <Link to={`/discography/artist/album/${album.album_id}`}>\r\n          <div className=\"card text-white card-album mb-4\" id=\"card-pick\">\r\n            <div className=\"card-header\">\r\n              <span className=\"card-title\"> {album.artist_name} </span> -{\" \"}\r\n              <span className=\"card-subtitle\">{album.album_name}</span>\r\n            </div>\r\n\r\n            <div className=\"card-body card-info\">\r\n              <h4>{album.album_name}</h4>\r\n              <p className=\"card-text\">\r\n                <strong>\r\n                  <i className=\"fas fa-heart\"></i> Rating : {album.album_rating}\r\n                </strong>\r\n                <br />\r\n                <strong>\r\n                  <i className=\"fas fa-tag\"></i> Album Label :{\" \"}\r\n                  {checkForContent(album.album_label)}\r\n                </strong>\r\n                <br />\r\n                <strong>\r\n                  <i className=\"fas fa-history\"></i> Album Release Date :{\" \"}\r\n                  {checkForContent(album.album_release_date)}\r\n                </strong>\r\n                <br />\r\n                <strong>\r\n                  <i className=\"fas fa-dna\"></i>\r\n                  Genre :{\" \"}\r\n                  {album.primary_genres.music_genre_list.length === 0\r\n                    ? \"NO GENRE AVAILABLE\"\r\n                    : album.primary_genres.music_genre_list.map(genre => (\r\n                        <li key={Math.random()} data={genre}>\r\n                          {genre.music_genre.music_genre_name}\r\n                        </li>\r\n                      ))}\r\n                </strong>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Album;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../layouts/Spinner\";\r\nimport Song from \"../songs/Song\";\r\nimport Artist from \"../artists/Artist\";\r\nimport Album from \"../albums/Album\";\r\nimport { trimNonsenseText } from \"../helpers/TextHelper\";\r\nimport { checkForContent } from \"../helpers/ContentHelper\";\r\n\r\nconst Discography = props => {\r\n  const [artist, setArtist] = useState({});\r\n  const [songs, setSongs] = useState({});\r\n  const [albums, setAlbums] = useState({});\r\n  const [related_artists, setRelatedArtists] = useState({});\r\n  const [lastfm_artist, setLastfmArtist] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      setLoading(true);\r\n      const res = await axios.all([\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}artist.get?\r\n        artist_id=${props.match.params.id}&\r\n        apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}track.search?\r\n          f_artist_id=${props.match.params.id}&\r\n          s_track_rating=desc&page_size=20&page=1&f_has_lyrics=1&\r\n          apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}artist.albums.get?\r\n          artist_id=${props.match.params.id}&\r\n          s_release_date=asc&\r\n          apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}artist.related.get?\r\n          artist_id=${props.match.params.id}&\r\n          apikey=${process.env.REACT_APP_API_KEY}`\r\n        )\r\n      ]);\r\n\r\n      let artist = res[0].data.message.body.artist;\r\n      setArtist({ artist });\r\n      let songs = res[1].data.message.body.track_list;\r\n      setSongs({ songs });\r\n      let albums = res[2].data.message.body.album_list;\r\n      setAlbums({ albums });\r\n      let related_artists = res[3].data.message.body.artist_list;\r\n      setRelatedArtists({ related_artists });\r\n\r\n      const res2 = await axios.get(\r\n        `https://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${artist.artist_name}&api_key=${process.env.REACT_APP_LAST_KEY}&format=json`\r\n      );\r\n\r\n      let lastfm_artist = res2.data.artist;\r\n      setLastfmArtist({ lastfm_artist });\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    getData();\r\n  }, [props.match.params.id]);\r\n\r\n  if (\r\n    artist === undefined ||\r\n    songs === undefined ||\r\n    Object.keys(artist).length === 0 ||\r\n    Object.keys(songs).length === 0 ||\r\n    albums === undefined ||\r\n    related_artists === undefined ||\r\n    Object.keys(albums).length === 0 ||\r\n    Object.keys(related_artists).length === 0 ||\r\n    lastfm_artist.lastfm_artist === undefined ||\r\n    Object.keys(lastfm_artist).length === 0\r\n  ) {\r\n    return (\r\n      <Fragment>\r\n        <Spinner />\r\n      </Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <Link to=\"/\" className=\"btn btn-light btn-sm mb-4\">\r\n          Go Home\r\n        </Link>\r\n\r\n        {/*START ARTIST JUMBOTRON */}\r\n        <div className=\"jumbotron jumbo-manual bg-secondary-dark\">\r\n          <h1 className=\"jumbo-header\">{artist.artist.artist_name}</h1>\r\n          <p className=\"heading-underline\" />\r\n          <div className=\"row row-disco\">\r\n            <div className=\"col-disco\">\r\n              <strong>\r\n                <i className=\"fas fa-flag\"></i> Country :{\" \"}\r\n                {checkForContent(artist.artist.artist_country)}\r\n              </strong>\r\n              <br />\r\n\r\n              <strong>\r\n                <i className=\"fas fa-list\"></i> Aliases :{\" \"}\r\n                {artist.artist.artist_alias_list.length === 0\r\n                  ? \"NO ALIASES\"\r\n                  : artist.artist.artist_alias_list.map(alias => (\r\n                      <li key={Math.random()} data={alias}>\r\n                        {alias.artist_alias}\r\n                      </li>\r\n                    ))}\r\n              </strong>\r\n            </div>\r\n            <div className=\"col-disco\">\r\n              <strong>\r\n                <i className=\"fas fa-heart\"></i> Artist Rating :{\" \"}\r\n                {checkForContent(artist.artist.artist_rating)}\r\n              </strong>\r\n              <br />\r\n              <strong>\r\n                <i className=\"fas fa-deaf\"></i> Artist Listeners :{\" \"}\r\n                {checkForContent(lastfm_artist.lastfm_artist.stats.listeners)}\r\n              </strong>\r\n              <br />\r\n              <strong>\r\n                <i className=\"fas fa-play\"></i> Artist Playcount :{\" \"}\r\n                {checkForContent(lastfm_artist.lastfm_artist.stats.playcount)}\r\n              </strong>\r\n            </div>\r\n            <div className=\"col-disco\">\r\n              <strong>\r\n                <i className=\"fas fa-dna\"></i>\r\n                Artist Tags :{\" \"}\r\n                {lastfm_artist.lastfm_artist.tags.tag.length === 0\r\n                  ? \"NO GENRE AVAILABLE\"\r\n                  : lastfm_artist.lastfm_artist.tags.tag.map(genre => (\r\n                      <li key={Math.random()} data={genre}>\r\n                        {genre.name}\r\n                      </li>\r\n                    ))}\r\n              </strong>\r\n            </div>\r\n          </div>\r\n          <div className=\"row mt-4\">\r\n            <a href=\"#top_songs\" className=\"btn med-btn \">\r\n              Top Songs\r\n            </a>\r\n            <a href=\"#top_albums\" className=\"btn med-btn \">\r\n              Best Albums\r\n            </a>\r\n            <a href=\"#related_artists\" className=\"btn med-btn\">\r\n              Related Artists\r\n            </a>\r\n          </div>\r\n        </div>\r\n        {/*END ARTIST JUMBOTRON */}\r\n\r\n        {/* Start BIO */}\r\n        {lastfm_artist.lastfm_artist.bio.content === \"\" ? (\r\n          \"\"\r\n        ) : (\r\n          <div className=\"wrap-collabsible\">\r\n            <input id=\"collapsible\" className=\"toggle\" type=\"checkbox\" />\r\n            <label htmlFor=\"collapsible\" className=\"lbl-toggle toggle-bio\">\r\n              Biography\r\n            </label>\r\n\r\n            <div className=\"collapsible-content\">\r\n              <div className=\"content-inner \">\r\n                {trimNonsenseText(lastfm_artist.lastfm_artist.bio.content)\r\n                  .split(\"\\n\")\r\n                  .map((text, i) => {\r\n                    return (\r\n                      <p key={i} data={text}>\r\n                        {text}\r\n                      </p>\r\n                    );\r\n                  })}\r\n                <label htmlFor=\"collapsible\" className=\"lbl-toggle \">\r\n                  Close\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* END BIO */}\r\n\r\n        <div className=\"container\">\r\n          <h1 className=\"text-center w-100 bg-light p-4 mb-4\" id=\"top_songs\">\r\n            Top 10 Songs\r\n          </h1>\r\n          <div className=\"row \">\r\n            {songs.songs.length === 0 ? (\r\n              <div className=\"alert alert-danger ml-3\">\r\n                <strong>NO TOP 10 SONGS YET... </strong>\r\n              </div>\r\n            ) : (\r\n              songs.songs.map(item => (\r\n                <Song\r\n                  key={item.track.track_id}\r\n                  song={item.track}\r\n                  loading={loading}\r\n                />\r\n              ))\r\n            )}\r\n          </div>\r\n          <h1 className=\"text-center w-100 bg-light p-4 mb-4\" id=\"top_albums\">\r\n            Album List\r\n          </h1>\r\n          <div className=\"row\">\r\n            {albums.albums.length === 0 ? (\r\n              <div className=\"alert alert-danger ml-3\">\r\n                <strong>NO ALBUMS RELEASED </strong>\r\n              </div>\r\n            ) : (\r\n              albums.albums.map(item => (\r\n                <Album\r\n                  key={item.album.album_id}\r\n                  album={item.album}\r\n                  loading={loading}\r\n                />\r\n              ))\r\n            )}\r\n          </div>\r\n          <h3\r\n            className=\"text-center w-100 bg-light p-4 mb-4\"\r\n            id=\"related_artists\"\r\n          >\r\n            Artists with the same style\r\n          </h3>\r\n          <div className=\"row\">\r\n            {related_artists.related_artists.length === 0 ? (\r\n              <div className=\"alert alert-danger ml-3\">\r\n                <strong>NO RELATED ARTISTS </strong>\r\n              </div>\r\n            ) : (\r\n              related_artists.related_artists.map(item => (\r\n                <Artist\r\n                  key={item.artist.artist_id}\r\n                  artist={item.artist}\r\n                  loading={loading}\r\n                />\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Discography;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nlet countryInfo;\r\n\r\nconst Country = props => {\r\n  const { country } = props;\r\n\r\n  return (\r\n    <div className=\"col-md-6\">\r\n      <Link to={`/countries/country/${country.alpha2Code}`}>\r\n        <div className=\"card text-white card-country mb-3\" id=\"card-pick\">\r\n          <div\r\n            className=\"card-header\"\r\n            style={{\r\n              background: `url(${country.flag}) no-repeat center center`\r\n            }}\r\n          >\r\n            <span className=\"card-subtitle\">{country.name}</span>\r\n            <span className=\"card-title\" style={{ float: \"right\" }}>\r\n              {country.alpha2Code}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"card-body card-info\">\r\n            <strong>Capital: </strong>{\" \"}\r\n            <strong className=\"info-text\"> {country.capital}</strong>\r\n            <br />\r\n            <strong>Population: </strong>{\" \"}\r\n            <strong className=\"info-text\"> {country.population}</strong>\r\n            <ul className=\"list-group\">\r\n              <strong>\r\n                Languages:\r\n                {country.languages.length === 0\r\n                  ? \"NO DATA AVAILABLE\"\r\n                  : country.languages.map(language => (\r\n                      <li\r\n                        className=\"list-group-item\"\r\n                        key={Math.random()}\r\n                        data={language}\r\n                      >\r\n                        {language.name}\r\n                      </li>\r\n                    ))}\r\n              </strong>\r\n            </ul>\r\n            <ul className=\"list-group\">\r\n              <strong>\r\n                Currencies:\r\n                {country.currencies.length === 0\r\n                  ? \"NO DATA AVAILABLE\"\r\n                  : country.currencies.map(currency => (\r\n                      <li\r\n                        className=\"list-group-item\"\r\n                        key={Math.random()}\r\n                        data={currency}\r\n                      >\r\n                        {currency.name}\r\n                      </li>\r\n                    ))}\r\n              </strong>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function getCountry() {\r\n  return countryInfo;\r\n}\r\n\r\nexport default Country;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Spinner from \"../layouts/Spinner\";\r\nimport Country from \"./Country\";\r\n\r\nconst Countries = () => {\r\n  const [country_list, setCountryList] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://restcountries.eu/rest/v2/all\")\r\n      .then(res => {\r\n        const countries = res.data;\r\n        setCountryList(countries);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  if (country_list === undefined || Object.keys(country_list).length === 0) {\r\n    return <Spinner />;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <Link to=\"/\" className=\"btn btn-light btn-sm mb-4\">\r\n          Go Home\r\n        </Link>\r\n        <div className=\"container\">\r\n          <h3 className=\"text-center text-xl\">Countries </h3>\r\n          <div className=\"row\">\r\n            {country_list.map(country => {\r\n              return <Country key={country.numericCode} country={country} />;\r\n            })}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Countries;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Song from \"../songs/Song\";\r\nimport Artist from \"../artists/Artist\";\r\nimport Spinner from \"../layouts/Spinner\";\r\nimport { checkForContent } from \"../helpers/ContentHelper\";\r\n\r\nconst CountryChart = props => {\r\n  const [country, setCountry] = useState({});\r\n  const [countrySongChart, setCountrySongChart] = useState({});\r\n  const [countryArtistChart, setCountryArtistChart] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .all([\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}chart.tracks.get?\r\n        ${process.env.REACT_APP_TOP_TEN}&\r\n        country=${props.match.params.id}&f_has_lyrics=1&\r\n        f_has_lyrics=1&\r\n        apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `${process.env.REACT_APP_SONGS_URL}chart.artists.get?\r\n        ${process.env.REACT_APP_TOP_TEN}&\r\n        country=${props.match.params.id}&\r\n        f_has_lyrics=1&\r\n        apikey=${process.env.REACT_APP_API_KEY}`\r\n        ),\r\n        axios.get(\r\n          `https://restcountries.eu/rest/v2/alpha/${props.match.params.id}`\r\n        )\r\n      ])\r\n      .then(res => {\r\n        const song_list = res[0].data.message.body.track_list;\r\n        setCountrySongChart(song_list);\r\n        const artist_list = res[1].data.message.body.artist_list;\r\n        setCountryArtistChart(artist_list);\r\n        const country = res[2].data;\r\n        setCountry(country);\r\n        console.log(res);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, [props.match.params.id]);\r\n\r\n  if (\r\n    countrySongChart === undefined ||\r\n    Object.keys(countrySongChart).length === 0 ||\r\n    countryArtistChart === undefined ||\r\n    Object.keys(countryArtistChart).length === 0 ||\r\n    country === undefined ||\r\n    Object.keys(country).length === 0\r\n  ) {\r\n    return <Spinner />;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <Link to=\"/countries/\" className=\"btn btn-light btn-sm mb-4\">\r\n          Go Back\r\n        </Link>\r\n\r\n        {/*START ARTIST JUMBOTRON */}\r\n        <div\r\n          className=\"jumbotron jumbo-manual\"\r\n          style={{\r\n            background: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${country.flag}) no-repeat center`,\r\n            height: \"100%\",\r\n            backgroundSize: \"cover\"\r\n          }}\r\n        >\r\n          <h1 className=\"jumbo-header mb-2\">\r\n            {country.name} / {country.nativeName}\r\n          </h1>\r\n          <p className=\"heading-underline\" />\r\n          <div className=\"row row-disco\">\r\n            <div className=\"col-disco\">\r\n              <ul className=\"list-group\">\r\n                <strong>\r\n                  {\" \"}\r\n                  <i className=\"fas fa-flag\"></i> Country Info\r\n                </strong>\r\n                <li className=\"list-group-item\">\r\n                  Capital : {checkForContent(country.capital)}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Population : {checkForContent(country.population)}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Languages :{\" \"}\r\n                  {country.languages.length === 0\r\n                    ? \"NO DATA\"\r\n                    : country.languages.map(language => (\r\n                        <div key={Math.random()} data={language}>\r\n                          {language.name}\r\n                        </div>\r\n                      ))}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"col-disco\">\r\n              <ul className=\"list-group\">\r\n                <strong>\r\n                  {\" \"}\r\n                  <i className=\"fas fa-globe\"></i> Regional Info\r\n                </strong>\r\n                <li className=\"list-group-item\">\r\n                  Country Region : {checkForContent(country.region)}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Country Subregion : {checkForContent(country.subregion)}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Country Regional Block :{\" \"}\r\n                  {country.regionalBlocs.length === 0\r\n                    ? \"NO DATA\"\r\n                    : country.regionalBlocs.map(bloc => (\r\n                        <div key={Math.random()} data={bloc}>\r\n                          {bloc.name}\r\n                        </div>\r\n                      ))}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"col-disco\">\r\n              <ul className=\"list-group\">\r\n                <strong>\r\n                  {\" \"}\r\n                  <i className=\"fas fa-info\"></i> Additional Info\r\n                </strong>\r\n                <li className=\"list-group-item\">\r\n                  Coordinates : {checkForContent(country.latlng[0])},{\" \"}\r\n                  {checkForContent(country.latlng[1])}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Alternate Spellings :{\" \"}\r\n                  {country.altSpellings.length === 0\r\n                    ? \"NO DATA AVAILABLE\"\r\n                    : country.altSpellings.map(spelling => (\r\n                        <div key={Math.random()} data={spelling}>\r\n                          {spelling}\r\n                        </div>\r\n                      ))}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                  Currencies :{\" \"}\r\n                  {country.currencies.length === 0\r\n                    ? \"NO DATA AVAILABLE\"\r\n                    : country.currencies.map(currency => (\r\n                        <div key={Math.random()} data={currency}>\r\n                          {currency.name}\r\n                        </div>\r\n                      ))}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className=\"row mt-4\">\r\n            <a href=\"#top_songs\" className=\"btn med-btn \">\r\n              Top Songs\r\n            </a>\r\n            <a href=\"#top_artists\" className=\"btn med-btn \">\r\n              Top Artists\r\n            </a>\r\n          </div>\r\n        </div>\r\n        {/*END ARTIST JUMBOTRON */}\r\n\r\n        <div className=\"container\">\r\n          <h3 className=\"text-center w-100 bg-light p-4 mb-4\" id=\"top_songs\">\r\n            Top Songs in {country.name}\r\n          </h3>\r\n          <div className=\"row \">\r\n            {countrySongChart.length === 0 ? (\r\n              <div className=\"alert alert-danger ml-3\">\r\n                <strong>NO TOP 10 SONGS YET... </strong>\r\n              </div>\r\n            ) : (\r\n              countrySongChart.map(item => (\r\n                <Song key={item.track.track_id} song={item.track} />\r\n              ))\r\n            )}\r\n          </div>\r\n\r\n          <h3 className=\"text-center w-100 bg-light p-4 mb-4\" id=\"top_artists\">\r\n            Top Artists in {country.name}\r\n          </h3>\r\n          <div className=\"row\">\r\n            {countryArtistChart.length === 0 ? (\r\n              <div className=\"alert alert-danger ml-3\">\r\n                <strong>NO TOP 10 ARTISTS YET... </strong>\r\n              </div>\r\n            ) : (\r\n              countryArtistChart.map(item => (\r\n                <Artist key={item.artist.artist_id} artist={item.artist} />\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CountryChart;\r\n","import React, { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  const toTheTop = () => {\r\n    document.documentElement.scrollTop = 0;\r\n  };\r\n\r\n  return (\r\n    <button onClick={toTheTop} id=\"topBtn\" title=\"Go to top\" style={btnStyle}>\r\n      <i href=\"#top\" className=\"fas fa-arrow-alt-circle-up fa-2x\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nconst btnStyle = {\r\n  display: \"none\" /* Hidden by default */,\r\n  position: \"fixed\" /* Fixed/sticky position */,\r\n  bottom: \"1rem\" /* Place the button at the bottom of the page */,\r\n  right: \"1rem\" /* Place the button 30px from the right */,\r\n  cursor: \"pointer\" /* Add a mouse pointer on hover */,\r\n  border: \"none\" /* Remove borders */,\r\n  borderRadius: \"10px\" /* Rounded corners */,\r\n  padding: \"0.2rem\",\r\n  backgroundColor: \"#4ac7c2\"\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import * as $ from \"jquery\";\r\n\r\n$(document).ready(function() {\r\n  // Add smooth scrolling to all links\r\n  $(\"a\").on(\"click\", function(event) {\r\n    // Make sure this.hash has a value before overriding default behavior\r\n    if (this.hash !== \"\") {\r\n      // Prevent default anchor click behavior\r\n      event.preventDefault();\r\n\r\n      // Store hash\r\n      var hash = this.hash;\r\n\r\n      // Using jQuery's animate() method to add smooth page scroll\r\n      // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area\r\n      $(\"html, body\").animate(\r\n        {\r\n          scrollTop: $(hash).offset().top\r\n        },\r\n        800,\r\n        function() {\r\n          // Add hash (#) to URL when done scrolling (default click behavior)\r\n          window.location.hash = hash;\r\n        }\r\n      );\r\n    } // End if\r\n  });\r\n\r\n  /* When the user scrolls down, hide the navbar. When the user scrolls up, show the navbar */\r\n  // var prevScrollpos = window.pageYOffset;\r\n  window.onscroll = function() {\r\n    // When the user scrolls down 20px from the top of the document, show the button\r\n    scrollFunction();\r\n  };\r\n\r\n  // To the top button\r\n  //Get the button:\r\n  const buttonToTop = document.getElementById(\"topBtn\");\r\n\r\n  function scrollFunction() {\r\n    if (\r\n      document.body.scrollTop > 20 ||\r\n      document.documentElement.scrollTop > 20\r\n    ) {\r\n      buttonToTop.style.display = \"block\";\r\n    } else {\r\n      buttonToTop.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n  const menuButton = document.querySelector(\".menu-btn\");\r\n  const menu = document.querySelector(\".menu\");\r\n  const menuNav = document.querySelector(\".menu-nav\");\r\n  const menuBranding = document.querySelector(\".menu-branding\");\r\n  const navItems = document.querySelectorAll(\".nav-item\"); //puts all items in an array\r\n  const navMenuItems = document.querySelectorAll(\".nav-menu-item\"); //puts all items in an array\r\n  // const siteMenu = document.querySelector(\".site-menu\");\r\n  const body = document.body;\r\n\r\n  // Set Initial State of Menu\r\n\r\n  let showMenu = false; //let can be reassigned at any time\r\n\r\n  menuButton.addEventListener(\"click\", toggleMenu);\r\n  navMenuItems.forEach(item => item.addEventListener(\"click\", toggleMenu));\r\n\r\n  function toggleMenu() {\r\n    if (!showMenu) {\r\n      menuButton.classList.add(\"close\");\r\n      menu.classList.add(\"show\");\r\n      menuNav.classList.add(\"show\");\r\n      menuBranding.classList.add(\"show\");\r\n      navItems.forEach(item => item.classList.add(\"show\")); //each item in nav gets show function\r\n      body.scroll = \"no\";\r\n      body.style.overflow = \"hidden\";\r\n\r\n      //Set Menu State\r\n      showMenu = true;\r\n    } else {\r\n      menuButton.classList.remove(\"close\");\r\n      menu.classList.remove(\"show\");\r\n      menuNav.classList.remove(\"show\");\r\n      menuBranding.classList.remove(\"show\");\r\n      navItems.forEach(item => item.classList.remove(\"show\")); //each item in nav gets show function\r\n      body.scroll = \"yes\";\r\n      body.style.overflow = \"visible\";\r\n      //Set Menu State\r\n      showMenu = false;\r\n    }\r\n  }\r\n\r\n  // Collapsible for discography bios\r\n\r\n  let myLabels = document.querySelectorAll(\".lbl-toggle\");\r\n\r\n  Array.from(myLabels).forEach(label => {\r\n    label.addEventListener(\"keydown\", e => {\r\n      // 32 === spacebar\r\n      // 13 === enter\r\n      if (e.which === 32 || e.which === 13) {\r\n        e.preventDefault();\r\n        label.click();\r\n      }\r\n    });\r\n  });\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Header from \"./components/layouts/Header\";\nimport Index from \"./components/layouts/Index\";\nimport Lyrics from \"./components/songs/Lyrics\";\nimport AlbumInfo from \"./components/albums/AlbumInfo\";\nimport Discography from \"./components/artists/Discography\";\nimport Countries from \"./components/countries/Countries\";\nimport CountryChart from \"./components/countries/CountryChart\";\nimport ScrollToTop from \"./components/activities/ScrollToTop\";\n\nimport { ContextController } from \"./context\"; //curly braces because it is not a default export\n\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport \"./js/main\";\n\nexport default function App() {\n  return (\n    <ContextController>\n      <Router>\n        <Fragment>\n          <ScrollToTop />\n          <Header />\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route exact path=\"/\" component={Index} />\n\n            <Route exact path=\"/lyrics/song/:id\" component={Lyrics} />\n            <Route\n              exact\n              path=\"/discography/artist/:id\"\n              component={Discography}\n            />\n            <Route\n              exact\n              path=\"/discography/artist/album/:id\"\n              component={AlbumInfo}\n            />\n            <Route exact path=\"/countries\" component={Countries} />\n\n            <Route\n              exact\n              path=\"/countries/country/:id\"\n              component={CountryChart}\n            />\n          </Switch>\n        </Fragment>\n      </Router>\n    </ContextController>\n  );\n}\n"],"sourceRoot":""}